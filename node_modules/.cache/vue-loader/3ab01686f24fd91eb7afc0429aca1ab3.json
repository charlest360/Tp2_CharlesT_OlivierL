{"remainingRequest":"C:\\Users\\carlo\\Documents\\TP2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\carlo\\Documents\\TP2\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\carlo\\Documents\\TP2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\carlo\\Documents\\TP2\\src\\components\\ManageFilm.vue?vue&type=template&id=cb870b8e&scoped=true&","dependencies":[{"path":"C:\\Users\\carlo\\Documents\\TP2\\src\\components\\ManageFilm.vue","mtime":1590087563892},{"path":"C:\\Users\\carlo\\Documents\\TP2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\carlo\\Documents\\TP2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\carlo\\Documents\\TP2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\carlo\\Documents\\TP2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCBbCiAgICBfYygiaDEiLCBbX3ZtLl92KCJNYW5hZ2UgYSBtb3ZpZSIpXSksCiAgICBfdm0uZXJyb3IgIT0gbnVsbCAmJiBfdm0uYWN0aW9uID09ICJlZGl0IgogICAgICA/IF9jKCJkaXYiLCBbCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJlcnJvciIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIkVycm9yIGVkaXRpbmcgdGhlIG1vdmllOiAiICsgX3ZtLl9zKF92bS5lcnJvcikpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIDogX3ZtLmVycm9yICE9IG51bGwgJiYgX3ZtLmFjdGlvbiA9PSAiZGVsZXRlIgogICAgICA/IF9jKCJkaXYiLCBbCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJlcnJvciIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIkVycm9yIGVkaXRpbmcgdGhlIG1vdmllOiAiICsgX3ZtLl9zKF92bS5lcnJvcikpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIDogX3ZtLnJlc3BvbnNlICE9IG51bGwgJiYgX3ZtLmFjdGlvbiA9PSAiZWRpdCIKICAgICAgPyBfYygiZGl2IiwgWwogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAicmVzcG9uc2UiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCIgTW92aWUgZWRpdGVkIHdpdGggc3VjY2VzcyAiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICA6IF92bS5yZXNwb25zZSAhPSBudWxsICYmIF92bS5hY3Rpb24gPT0gImRlbGV0ZSIKICAgICAgPyBfYygiZGl2IiwgWwogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAicmVzcG9uc2UiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCIgTW92aWUgZGVsZXRlZCB3aXRoIHN1Y2Nlc3MgIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgOiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImFkZE1vdmllRm9ybSIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJmb3JtIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBzdWJtaXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnZhbGlkYXRlQW5kU2VuZCgkZXZlbnQpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgX3ZtLmZpbG1JZCA9PSAibm9uZSIKICAgICAgICAgICAgICAgICAgPyBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiIGZvcm1fX2xhYmVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBmb3I6ICJyZWdpc3RyYXRpb25Gb3JtX2lkIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIk1vdmllJ3MgaWQgOiIpXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1vdmllSWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibW92aWVJZCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybV9fY29udHJvbCAiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJudW1iZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAicmVnaXN0cmF0aW9uRm9ybV9pZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImlkIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm1vdmllSWQgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubW92aWVJZCA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgIF92bS5maWxtSWRFcnJvciAhPSBudWxsCiAgICAgICAgICAgICAgICAgID8gX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZhbGlkYXRpb25FcnJvciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkZpbG0gbm90IGZvdW5kICIpCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJsYWJlbCIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICIgZm9ybV9fbGFiZWwiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZm9yOiAicmVnaXN0cmF0aW9uRm9ybV90aXRsZSIgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiVGl0bGUgOiIpXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udGl0bGUsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0aXRsZSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybV9fY29udHJvbCAiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg6ICI1MCIsCiAgICAgICAgICAgICAgICAgICAgICBtaW5sZW5ndGg6ICIyIiwKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgIGlkOiAicmVnaXN0cmF0aW9uRm9ybV90aXRsZSIsCiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAidGl0bGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnRpdGxlIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnRpdGxlID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLnZhbGlkYXRpb25FcnJvcnMubGVuZ3RoID49IDEgJiYKICAgICAgICAgICAgICAgIF92bS52YWxpZGF0aW9uRXJyb3JzWzBdLnR5cGUgPT0gInRpdGxlIgogICAgICAgICAgICAgICAgICA/IF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2YWxpZGF0aW9uRXJyb3IiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0udmFsaWRhdGlvbkVycm9yc1swXS5tZXNzYWdlKSArICIgIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIiBmb3JtX19sYWJlbCIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBmb3I6ICJyZWdpc3RyYXRpb25Gb3JtX1JlbGVhc2VfeWVhciIgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiUmVsZWFzZSB5ZWFyIDoiKV0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnJlbGVhc2VfeWVhciwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInJlbGVhc2VfeWVhciIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybV9fY29udHJvbCAiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg6ICI0IiwKICAgICAgICAgICAgICAgICAgICAgIG1pbmxlbmd0aDogIjQiLAogICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgaWQ6ICJyZWdpc3RyYXRpb25Gb3JtX1JlbGVhc2VfeWVhcmQiLAogICAgICAgICAgICAgICAgICAgICAgbmFtZTogIlJlbGVhc2VfeWVhciIsCiAgICAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU6ICJvZmYiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnJlbGVhc2VfeWVhciB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5yZWxlYXNlX3llYXIgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0udmFsaWRhdGlvbkVycm9ycy5sZW5ndGggPj0gMSAmJgogICAgICAgICAgICAgICAgX3ZtLnZhbGlkYXRpb25FcnJvcnNbMF0udHlwZSA9PSAicmVsZWFzZV95ZWFyIgogICAgICAgICAgICAgICAgICA/IF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2YWxpZGF0aW9uRXJyb3IiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0udmFsaWRhdGlvbkVycm9yc1swXS5tZXNzYWdlKSArICIgIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIiBmb3JtX19sYWJlbCIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBmb3I6ICJyZWdpc3RyYXRpb25Gb3JtX0xlbmd0aCIgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTGVuZ3RoIGluIG1pbnV0ZXMgOiIpXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibGVuZ3RoIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtX19jb250cm9sICIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIG1pbjogIjEiLAogICAgICAgICAgICAgICAgICAgICAgbWF4OiAiOTk5IiwKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJudW1iZXIiLAogICAgICAgICAgICAgICAgICAgICAgaWQ6ICJyZWdpc3RyYXRpb25Gb3JtX0xlbmd0aCIsCiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiTGVuZ3RoIiwKICAgICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogIm9mZiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ubGVuZ3RoIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmxlbmd0aCA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS52YWxpZGF0aW9uRXJyb3JzLmxlbmd0aCA+PSAxICYmCiAgICAgICAgICAgICAgICBfdm0udmFsaWRhdGlvbkVycm9yc1swXS50eXBlID09ICJsZW5ndGgiCiAgICAgICAgICAgICAgICAgID8gX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZhbGlkYXRpb25FcnJvciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS52YWxpZGF0aW9uRXJyb3JzWzBdLm1lc3NhZ2UpICsgIiAiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJyYWRpb0xpIiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZm9ybV9fbGFiZWwiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUmF0aW5nIDoiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fbChfdm0ucmF0aW5nVHlwZXMsIGZ1bmN0aW9uKHJhdGluZ1R5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsga2V5OiByYXRpbmdUeXBlLmlkLCBzdGF0aWNDbGFzczogInJhZGlvRGl2IiB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5yYXRpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInJhdGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicmFkaW9CdXR0ICIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAicmFkaW8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcmF0aW5nVHlwZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcmF0aW5nVHlwZS5uYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJhdGluZ1R5cGUubmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogX3ZtLl9xKF92bS5yYXRpbmcsIHJhdGluZ1R5cGUubmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5yYXRpbmcgPSByYXRpbmdUeXBlLm5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICIgcmFkaW9MYWJlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZvcjogcmF0aW5nVHlwZS5pZCB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiICIgKyBfdm0uX3MocmF0aW5nVHlwZS5uYW1lKSldCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF92bS52YWxpZGF0aW9uRXJyb3JzLmxlbmd0aCA+PSAxICYmCiAgICAgICAgICAgICAgICBfdm0udmFsaWRhdGlvbkVycm9yc1swXS50eXBlID09ICJyYXRpbmciCiAgICAgICAgICAgICAgICAgID8gX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZhbGlkYXRpb25FcnJvciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS52YWxpZGF0aW9uRXJyb3JzWzBdLm1lc3NhZ2UpICsgIiAiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICIgZm9ybV9fbGFiZWwiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBEZWNyaXB0aW9uIDoiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInRleHRhcmVhIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmRlc2NyaXB0aW9uLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm1fX2NvbnRyb2wiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiRGVzY3JpcHRpb24iLAogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJBZGQgYSBtb3ZpZSBkZXNjcmlwdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICBtaW46ICI1IiwKICAgICAgICAgICAgICAgICAgICAgIGNvbHM6ICIxMCIsCiAgICAgICAgICAgICAgICAgICAgICByb3dzOiAiNSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uZGVzY3JpcHRpb24gfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGVzY3JpcHRpb24gPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0udmFsaWRhdGlvbkVycm9ycy5sZW5ndGggPj0gMSAmJgogICAgICAgICAgICAgICAgX3ZtLnZhbGlkYXRpb25FcnJvcnNbMF0udHlwZSA9PSAiZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgID8gX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZhbGlkYXRpb25FcnJvciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS52YWxpZGF0aW9uRXJyb3JzWzBdLm1lc3NhZ2UpICsgIiAiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJyYWRpb0xpIiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZm9ybV9fbGFiZWwiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiTGFuZ3VhZ2UgOiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5sYW5ndWFnZXMsIGZ1bmN0aW9uKGxhbmd1YWdlKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7IGtleTogbGFuZ3VhZ2UuaWQsIHN0YXRpY0NsYXNzOiAicmFkaW9EaXYiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxhbmd1YWdlX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJsYW5ndWFnZV9pZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicmFkaW9CdXR0ICIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAicmFkaW8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogbGFuZ3VhZ2UuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGxhbmd1YWdlLm5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbGFuZ3VhZ2UuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IF92bS5fcShfdm0ubGFuZ3VhZ2VfaWQsIGxhbmd1YWdlLmlkKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmxhbmd1YWdlX2lkID0gbGFuZ3VhZ2UuaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICIgcmFkaW9MYWJlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZvcjogbGFuZ3VhZ2UuaWQgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKGxhbmd1YWdlLm5hbWUpKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX3ZtLnZhbGlkYXRpb25FcnJvcnMubGVuZ3RoID49IDEgJiYKICAgICAgICAgICAgICAgIF92bS52YWxpZGF0aW9uRXJyb3JzWzBdLnR5cGUgPT0gImxhbmd1YWdlIgogICAgICAgICAgICAgICAgICA/IF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICJyZWQiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS52YWxpZGF0aW9uRXJyb3JzWzBdLm1lc3NhZ2UpICsgIiAiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAibGFiZWwiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiIGZvcm1fX2xhYmVsIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZvcjogInJlZ2lzdHJhdGlvbkZvcm1fU3BlY2lhbF9GZWF0dXJlcyIgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiU3BlY2lhbCBmZWF0dXJlcyA6IildCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5zcGVjaWFsX2ZlYXR1cmVzLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic3BlY2lhbF9mZWF0dXJlcyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybV9fY29udHJvbCAiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICBtYXg6ICIyMDAiLAogICAgICAgICAgICAgICAgICAgICAgaWQ6ICJyZWdpc3RyYXRpb25Gb3JtX1NwZWNpYWxfRmVhdHVyZXMiLAogICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNwZWNpYWxfZmVhdHVyZXMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnNwZWNpYWxfZmVhdHVyZXMgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBfdm0uc3BlY2lhbF9mZWF0dXJlcyA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS52YWxpZGF0aW9uRXJyb3JzLmxlbmd0aCA+PSAxICYmCiAgICAgICAgICAgICAgICBfdm0udmFsaWRhdGlvbkVycm9yc1swXS50eXBlID09ICJzcGVjaWFsX2ZlYXR1cmVzIgogICAgICAgICAgICAgICAgICA/IF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICJyZWQiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS52YWxpZGF0aW9uRXJyb3JzWzBdLm1lc3NhZ2UpICsgIiAiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInN1Ym1pdEJ1dHRvbkxpIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic3VibWl0QnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZWRpdEJ1dHQiIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zZXRBY3Rpb24oImVkaXQiKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgRWRpdCBtb3ZpZSAiKV0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzdWJtaXRCdXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJhZGRCdXR0IiB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2V0QWN0aW9uKCJkZWxldGUiKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgRGVsZXRlIG1vdmllICIpXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJzdWJtaXRCdXR0b25MaSIgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdCiAgICAgICAgICApCiAgICAgICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}